// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send notification to all subscriber
	// (POST /notification/send)
	SendNotification(w http.ResponseWriter, r *http.Request)
	// Subscriber Stats
	// (GET /notification/stats)
	SubscriberStats(w http.ResponseWriter, r *http.Request)
	// Subscriber Status
	// (POST /notification/status)
	SubscriberStatus(w http.ResponseWriter, r *http.Request)
	// Subscribe to notification
	// (POST /notification/subscribe)
	SubscribeNotification(w http.ResponseWriter, r *http.Request)
	// Unsubscribe to notification
	// (POST /notification/unsubscribe)
	UnsubscribeNotification(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SendNotification operation middleware
func (siw *ServerInterfaceWrapper) SendNotification(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendNotification(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubscriberStats operation middleware
func (siw *ServerInterfaceWrapper) SubscriberStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubscriberStats(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubscriberStatus operation middleware
func (siw *ServerInterfaceWrapper) SubscriberStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubscriberStatus(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubscribeNotification operation middleware
func (siw *ServerInterfaceWrapper) SubscribeNotification(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubscribeNotification(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UnsubscribeNotification operation middleware
func (siw *ServerInterfaceWrapper) UnsubscribeNotification(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnsubscribeNotification(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/notification/send", wrapper.SendNotification)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/notification/stats", wrapper.SubscriberStats)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/notification/status", wrapper.SubscriberStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/notification/subscribe", wrapper.SubscribeNotification)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/notification/unsubscribe", wrapper.UnsubscribeNotification)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWW2/bNhT+KwS3RzW2m6TF/OZtecjaFUWdYhuCPNDSkc1MIjnyMK5R+L8PhxJ1sZTL",
	"hixzXwLFPLfvOx/P4Vee6tJoBQodn3/lLt1AKcLnhbXa0oex2oBFCeHnEpwTa6BP3Bngc+7QSrXm+4S7",
	"wq9HDvYJt/CXlxYyPr+urJIm0E0S7fXqFlKkQL+2Se7NnoFLrTQoteJz/kGjzGUq6F8WrRIOX0RpCgq+",
	"sCjTAphYaY/M6RJwQ9UlQxgosXgsRWXTTfABtqxOMgx6QEH0bjjYJ3yJoupBHzFqFMUiRXkHS79yw7Ku",
	"yEAwEUyY8ys6XIF13ereNhVJhbAGG3CS56USjwVnUj0c/fTe6A9FvSfYbDqMdkhfEzoZ8DMGK9LrR/iV",
	"rnIeVrls6mOucu5UmYvCQVPoSusChCLY3mQCIVvgMOB74ZDV54z+9mC/OX97Pjs7P/sh4bm2pcCKgDdn",
	"/FE+Ggzd9AF0A2FMWH+Cuvx5WOZPhQSF7IrOewp3kFrA2evTsUvzf+COEPqwaRBB6q3E3ZLGWQV3YeQ7",
	"2C08bkLXqa4NiAwsT7gSJaX5/dXi4+Wrdxd/tJlF8OJ7CipVrsk31QpFGnDWjr+ABeXYe1DOE2XeFhQe",
	"0bj5ZLLdbk9ug0URDE5SXU6Isj5Lny6WV7kv2MJIlmvLnDdGW5RqzSpvtoUVE8bwZkLFxL/Bii3CwR1Y",
	"V4WbnUxPppRFG1DCSD7np+GnhBuBm8DJRHVG2sSByoJMtAvgSCzh5DKj2wAq605AXrUCHP6os13kBVRw",
	"FcYUMeyto3riaqGv7y3kfM6/m7S7Z1Ivnkmc/IHxg/sIKiM2jHcbpkbmPUPNRNEbLCy3umQO7F1odCse",
	"tB6CmpzRylUSeT2dDsWLOtNVs3LhC3w2oNV6HYHpFXwxkNJdgdqmFTSfX/elfH2zv0m482Up7K4mqU/O",
	"gJQQ8KD1cfesYaz1jWu1o8ZpexZWqgQjrFD57SxmsYBvqTPtOokox9pQ76jxO9hrhHf/0R1cdqXyD65h",
	"2BiktzVgvTL/zf17NiH5USUdyYW+Txd+VBjR5gnaeIEh/TSBKNiOiASjSBpMlUYES8O74wkqmb2ASmLK",
	"wzJrKR+jfojULtUjOvLqCUr63BodjZYeGDYdTEc4bT5FHX1WR6+kbolDLYVdRyW7sOr6kT9anfk0NGYZ",
	"6e+/goWRw1cwvUv3N/u/AwAA///fmJh5hhAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
